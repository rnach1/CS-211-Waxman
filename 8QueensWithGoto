#include <iostream>
using namespace std;

int main() {
        int b[8][8] = {0}, col = 0, row, possibleOutcomes = 1;
        b[0][0] = 1; /* starting queen at top left position */

NC: 
        col++; // moves us to the following column
        if(col==8) goto print; /* we successfully placed all 8 queens without them attacking one another so we now print the board*/
        row = -1; 

NR:
        row++; // moves us to the following row
        if(row==8) goto backtrack; /* we have to backtrack because we could not find a place for the final queen */
        
        /* Three tests (below) which need to be passed through in order to place a queen in the position on the 2D array */
        
        for(int i=0; i<col; i++)
                if(b[row][i]==1) goto NR; /*row test will check if there is a queen to the right of the current position if there is we will go to the next row to see if that is available (i.e. != 0) */

        for(int i=1; row-i>=0 && col-i>=0; i++)
                if(b[row-i][col-i] == 1) goto NR; /*up-diagonal test will check to see if there is a queen in the top diagonal area. if there is a queen then we will go to the next row */
        
        for(int i = 1; row+i<8 && col-i>=0; i++)
                if(b[row+i][col-i] == 1) goto NR; /* down-diagonal test will check to see if there is a queen in the diagonal area below the current position of the queen. If there is a queen we will go to the next row */
                
        b[row][col] = 1; /* if all three tests pass, and there is no queen in the position, we can place a 1, representing a queen, and move to the next column (as shown in the next line of code) */
        goto NC; 

backtrack:
        col--; // move back a column
        if(col == -1) return 0; /* we used all possible outcomes to the program therefore we can terminate it */
        row = 0; 
        while(b[row][col] == 0) row++;
        b[row][col] = 0; /* changes the position of the queen from 1 to 0 so we can place a new queen for a different solution to the problem */
        goto NR;

print:
        cout<<"Outcome #"<<possibleOutcomes<<endl;
        for(int i = 0; i<8; i++) {
                for(int j = 0; j<8; j++)
                        cout << b[i][j] << " ";
                cout << endl;
        }
        possibleOutcomes++; /* after the loops runs we want to adjust the outcome variable to account for the following solution number */  

        cout << endl;
        goto backtrack; // looks for another solution

        return 0;
}
