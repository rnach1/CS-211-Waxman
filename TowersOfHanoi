#include <iostream>
#include <vector>
using namespace std;

int main() {
    
  vector<int>t[3]; // three towers A,B,C represented as vector
  int n, candidate, to, from, move = 0; //move counts the number of moves we are on

  cout<<"Please enter a number of rings to move: ";
  cin>>n;
  cout<<endl;

  //initialize the three towers below

  for(int i = n+1; i>=1; i--)
    t[0].push_back(i);
    t[1].push_back(n+1);
    t[2].push_back(n+1);
  

  //initialize towers and candidate 

  from = 0; // from tower
  to = 1; // to tower 
  candidate = 1; // ring we just used 

  if(n%2==1){ //  for odd amount of rings
// for odd amount of rings we move to the right
    
  
    while(t[1].size()<n+1){ //there are still rings to transfer to tower B or (t[1])
    cout<<"Move number "<<++move<<": Transfer ring "<<candidate<<" from tower "<<char(from+65)<<" to tower "<<char(to+65)<<endl;

    t[to].push_back(t[from].back());
    t[from].pop_back(); /* take the ring from the from tower and place it on the to tower, then to make sure there is no duplicate of this ring remove it from the from tower. */ 

    if(t[(to+1)%3].back() < t[(to+2)%3].back()) 
   
/* we need to check which tower has a lower ring value at the top so that we can set that tower to be the from tower, which is where our next ring will be moved from */

    from = (to+1)%3;
    else from = (to+2) %3;

// the candidate is now the ring that is on top of the from tower 

      candidate = t[from].back(); 

/* we check, below, to see which value from the two towers remaining have a higher value. If the tower closest to from has a higher value that means we can place a lower value ring on it. If not we move to the only other tower available as we would like to move the ring until all of them are on t[1] or tower B. */

      if (t[from].back() < t[(from+1)%3].back())
         to = (from+1)%3;
      else
         to = (from+2)%3;
      
    } // while 
  } // if

  if (n%2==0) { // for even amount of rings
// for even amount of rings we move to the left 
    to = 2;
    while(t[1].size() < n+1){

      cout<<"Move number "<<++move<<": Transfer ring "<<candidate<<" from tower "<<char(from+65)<<" to tower "<<char(to+65)<<endl;
      
    t[to].push_back(t[from].back());
    t[from].pop_back(); /* take the ring from the from tower and place it on the to tower, then to make sure there is not duplicate of this ring remove it from the from tower. */ 

    if(t[(to+2)%3].back() < t[(to+1)%3].back()) 

/* we need to check which tower has a lower ring value at the top so that we can set that tower to be the from tower, which is where our next ring will be moved from */

    from = (to+2)%3;

    else from = (to+1) %3;

// the candidate is now the ring that is on top of the from tower 

      candidate = t[from].back();

/* we check, below, to see which value from the two towers remaining have a higher value. If the tower closest to from has a higher value that means we can place a lower value ring on it. If not we move to the only other tower available as we would like to move the ring until all of them are on t[1] or tower B. */

      if (t[(from+2)%3].back() < t[from].back()) 
         to = (from+1)%3; 
      else 
         to = (from+2)%3; 
    } // if 
  } // while 
  
   return 0; 
} // main 

